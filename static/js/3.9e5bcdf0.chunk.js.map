{"version":3,"sources":["components/Profile/ProfileInfo/ProfileInfo.module.css","components/Profile/MyPosts/MyPosts.module.css","components/Profile/MyPosts/Post/Post.module.css","components/Profile/MyPosts/Post/Post.jsx","components/Profile/MyPosts/MyPosts.jsx","components/Profile/MyPosts/MyPostsCopyClass.jsx","components/Profile/MyPosts/MyPostsContainer.jsx","components/Profile/ProfileInfo/ProfileStatusWithHooks.jsx","components/Profile/ProfileInfo/ProfileDataForm/ProfileDataForm.jsx","components/Profile/ProfileInfo/ProfileData/ProfileData.jsx","components/Profile/ProfileInfo/ProfileInfo.jsx","components/Profile/Profile.jsx","components/Profile/ProfileConteiner.jsx"],"names":["module","exports","Post","props","className","s","item","src","message","numberLike","MyPosts","React","memo","postsElemets","posts","map","p","key","id","createRef","postBlock","AddPostFormRedux","onSubmit","values","addPost","newPostBody","maxLength10","maxLengthCreator","reduxForm","form","handleSubmit","Field","component","Textarea","name","placeholder","validate","required","PureComponent","MyPostsContainer","connect","state","profilePage","newPostText","dispatch","addPostActionCreator","ProfileStatusWithHooks","useState","editMode","setEditMode","status","setStatus","useEffect","onDoubleClick","onChange","e","currentTarget","value","autoFocus","onBlur","updateStatus","type","ProfileDataFormReduxForm","profile","error","onClick","style","formSummaryError","createField","Input","Object","keys","contacts","contact","Contact","contactTitle","contactValue","ProfileData","isOwner","goToEditMode","fullName","lookingForAJob","lookingForAJobDescription","aboutMe","ProfileInfo","Preloader","descriptionBlock","photos","large","userPhoto","mainPhoto","target","files","length","savePhoto","initialValues","formData","saveProfile","then","Profile","store","ProfileConteiner","userId","this","match","params","authorizedUserId","history","push","getUserProfile","getStatus","reFreshProfile","prevProps","Component","compose","auth","isAuth","withRouter"],"mappings":"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","file":"static/js/3.9e5bcdf0.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"descriptionBlock\":\"ProfileInfo_descriptionBlock__3cd8Y\",\"mainPhoto\":\"ProfileInfo_mainPhoto__1Fgjo\",\"contact\":\"ProfileInfo_contact__1N3gp\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"postBlock\":\"MyPosts_postBlock__3b6E0\",\"posts\":\"MyPosts_posts__3tZ1c\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"item\":\"Post_item__ihtu9\"};","import React from 'react';\nimport s from './Post.module.css';\nconst Post = (props) => {\n  return (\n    <div className={s.item}>\n      <img src='https://proprikol.ru/wp-content/uploads/2020/02/kartinki-na-avatarku-dlya-parnej-i-muzhchin-1-1.jpg' />\n      {props.message}\n      <div>\n        <button>{props.numberLike} Like</button>\n      </div>\n    </div>\n  );\n}\n\nexport default Post;\n","import React from 'react';\nimport s from './MyPosts.module.css';\nimport Post from './Post/Post.jsx';\nimport { reduxForm, Field } from 'redux-form';\nimport { maxLengthCreator, required } from '../../../utils/validators/validators.js';\nimport { Textarea } from '../../common/FormsControls/FormControls';\n\nconst MyPosts = React.memo(props => {\n  \n  // console.log(\"RENDER YO To\");\n\n  let postsElemets = props.posts.map(p => <Post message={p.message} numberLike={p.numberLike} key={p.id} />);\n\n  let newPostElemet = React.createRef();\n\n  let addNewPost = (values) => {\n    props.addPost(values.newPostBody)\n  }\n  return (\n    <div className={s.postBlock}>\n      <h3>My posts</h3>\n      <div>\n        <div>\n          <AddPostFormRedux onSubmit={addNewPost} />\n        </div>\n      </div>\n      <div className={s.posts}>\n        {postsElemets}\n      </div>\n    </div>\n  );\n});\n\nconst maxLength10 = maxLengthCreator(10);\n\nconst AddPostForm = (props) => {\n  return (\n    <form onSubmit={props.handleSubmit}>\n      <div>\n        <Field component={Textarea} name=\"newPostBody\" placeholder=\"New Post\"\n                validate={[required, maxLength10 ]} />\n      </div>\n      <div>\n        <button>Add Post</button>\n      </div>\n    </form>\n  )\n}\n\nconst AddPostFormRedux = reduxForm({ form: \"myPostsAddPostForm\" })(AddPostForm)\n\nexport default MyPosts;\n","import React from 'react';\nimport { Field, reduxForm } from 'redux-form';\nimport { maxLengthCreator, required } from '../../../utils/validators/validators.js';\nimport { Textarea } from '../../common/FormsControls/FormControls';\nimport s from './MyPosts.module.css';\nimport Post from './Post/Post.jsx';\n\nclass MyPostsClassCopy extends React.PureComponent {\n  \n  // componentDidMount() {\n  //   setTimeout(() => {\n  //     this.setState({a: 12});\n  //   }, 3000)\n  // }\n\n  // shouldComponentUpdate(nextProps, nextState) {\n  //   return nextProps != this.props || nextState != this.state;\n  // }\n\n  render() {\n    console.log(\"RENDER YO\")\n\n    let postsElemets = this.props.posts.map(p => <Post message={p.message} numberLike={p.numberLike} key={p.id} />);\n\n    let newPostElemet = React.createRef();\n\n    let addNewPost = (values) => {\n      this.props.addPost(values.newPostBody)\n    }\n    return (\n      <div className={s.postBlock}>\n        <h3>My posts</h3>\n        <div>\n          <div>\n            <AddPostFormRedux onSubmit={addNewPost} />\n          </div>\n        </div>\n        <div className={s.posts}>\n          {postsElemets}\n        </div>\n      </div>\n    )\n  }\n}\nconst maxLength10 = maxLengthCreator(10);\n\nconst AddPostForm = (props) => {\n  return (\n    <form onSubmit={props.handleSubmit}>\n      <div>\n        <Field component={Textarea} name=\"newPostBody\" placeholder=\"New Post\"\n          validate={[required, maxLength10]} />\n      </div>\n      <div>\n        <button>Add Post</button>\n      </div>\n    </form>\n  )\n}\n\nconst AddPostFormRedux = reduxForm({ form: \"myPostsAddPostForm\" })(AddPostForm)\n\nexport default MyPostsClassCopy;\n","import React from 'react';\nimport { addPostActionCreator } from '../../../redax/profileReducer';\nimport MyPosts from './MyPosts';\nimport { connect } from 'react-redux';\nimport MyPostsClassCopy from './MyPostsCopyClass';\n\nlet mapStateToProps = (state) => {\n  return {\n    posts: state.profilePage.posts,\n    newPostText: state.profilePage.newPostText\n  }\n}\n\nlet mapDispatchToProps = (dispatch) => {\n  return {\n    addPost: (newPostBody) => {\n      dispatch (addPostActionCreator(newPostBody))\n    }\n  }\n\n}\n\nconst MyPostsContainer = connect(mapStateToProps, mapDispatchToProps)(MyPosts);\n\nexport default MyPostsContainer;\n","import React, { useEffect, useState } from 'react';\nimport s from './ProfileInfo.module.css';\n\nconst ProfileStatusWithHooks = (props) => {\n\n    let [editMode, setEditMode] = useState(false);\n    let [status, setStatus] = useState(props.status);\n\n    useEffect(() => {\n        setStatus(props.status)\n    }, [props.status]);\n\n    const activateEditMode = () => {\n        setEditMode(true);\n    }\n    const deactivateEditMode = () => {\n        setEditMode(false);\n        props.updateStatus(status);\n    }\n    const onStatusChange = (e) => {\n        setStatus(e.currentTarget.value);\n    }\n    return (\n        <div>\n            {!editMode &&\n                <div>\n                    <b>Status: </b><span onDoubleClick={activateEditMode}>{props.status || \"No status\"}</span>\n                </div>\n            }\n            {editMode &&\n                <div>\n                    <input onChange={onStatusChange} autoFocus={true} onBlur={deactivateEditMode}\n                        value={status} type=\"text\" />\n                </div>\n            }\n        </div>\n    )\n}\n\n\nexport default ProfileStatusWithHooks;","import React from \"react\";\nimport { reduxForm } from \"redux-form\";\nimport { createField, Input, Textarea } from \"../../../common/FormsControls/FormControls\";\nimport s from \"../ProfileInfo.module.css\";\nimport style from \"../../../common/FormsControls/FormControls.module.css\";\n\nconst ProfileDataForm = ({ handleSubmit, profile, error }) => {\n    return <form onSubmit={handleSubmit} >\n        {<div><button onClick={() => { }}>save</button></div>}\n        <div>{error && <div className={style.formSummaryError}>\n            {error}\n        </div>}\n        </div>\n        <div>\n            <b>My name</b>: {createField(\"My name\", \"fullName\", Input, [])}\n        </div>\n        <div>\n            <b>Loking for a job</b>:\n            {createField(\"\", \"lookingForAJob\", Input, [], { type: \"checkbox\" })}\n        </div>\n        <div>\n            <b>My professional skills</b>:\n            {createField(\"My professional skills\", \"lookingForAJobDescription\", Textarea, [])}\n        </div>\n        <div>\n            <b>About me</b>:\n            {createField(\"About me\", \"aboutMe\", Textarea, [])}\n        </div>\n        <div>\n            <b>Contacts</b>: {Object.keys(profile.contacts).map(key => {\n                return <div key={key} className={s.contact}>\n                    <b>{key}: {createField(key, \"contacts.\" + key, Input, [])} </b>\n                </div>\n            })}\n        </div>\n    </form>\n};\n\nconst ProfileDataFormReduxForm = reduxForm({ form: 'edit-profile' })(ProfileDataForm);\n\nexport default ProfileDataFormReduxForm;\n\n","import React from \"react\";\nimport s from '../ProfileInfo.module.css';\n\n\nconst ProfileData = ({profile, isOwner, goToEditMode}) => {\n    return (\n        <div> \n            {isOwner && <div><button onClick={goToEditMode}>edit</button></div>}\n            <div>\n                <b>My name</b>: {profile.fullName}\n            </div>\n            <div>\n                <b>Loking for a job</b>: {profile.lookingForAJob ? \"Yes\" : \"No\"}\n            </div>\n            {\n                profile.lookingForAJob &&\n                <div>\n                    <b>My professional skills</b>: {profile.lookingForAJobDescription}\n                </div>\n            }\n            <div>\n                <b>About me</b>: {profile.aboutMe}\n            </div>\n            <div>\n                <b>Contacts</b>: {Object.keys(profile.contacts).map(key => {\n                    return <Contact key={key} contactTitle={key} contactValue={profile.contacts[key]} />\n                })}\n            </div>\n        </div>\n    );\n};\n\nconst Contact = ({ contactTitle, contactValue }) => {\n    return <div className={s.contact}><b>{contactTitle}: </b>{contactValue}</div>\n};\n\nexport default ProfileData;\n\n","import React, { useState } from 'react';\nimport Preloader from '../../common/Preloader/Preloader';\nimport s from './ProfileInfo.module.css';\nimport ProfileStatusWithHooks from './ProfileStatusWithHooks';\nimport userPhoto from '../../../assets/images/user.png';\nimport ProfileDataForm from './ProfileDataForm/ProfileDataForm';\nimport ProfileData from './ProfileData/ProfileData';\n\nconst ProfileInfo = (props) => {\n\n    const [editMode, setEditMode] = useState(false);\n\n    const onSubmit = (formData) => {\n        props.saveProfile(formData).then(\n            () => {\n                setEditMode(false)\n            }\n        );\n    };\n\n    if (!props.profile) {\n        return <Preloader />\n    }\n\n    const onMainPhotoSelected = (e) => {\n        if (e.target.files.length) {\n            props.savePhoto(e.target.files[0]);\n        }\n    }\n    return (\n        <div>\n            <div>\n                <img src='https://p.bigstockphoto.com/GeFvQkBbSLaMdpKXF1Zv_bigstock-Aerial-View-Of-Blue-Lakes-And--227291596.jpg' />\n            </div>\n            <div className={s.descriptionBlock}>\n                <img src={props.profile.photos.large || userPhoto} className={s.mainPhoto} />\n                {props.isOwner && <input type=\"file\" onChange={onMainPhotoSelected} />}\n                <ProfileStatusWithHooks status={props.status} updateStatus={props.updateStatus} />\n\n                {editMode ? <ProfileDataForm profile={props.profile} initialValues={props.profile} onSubmit={onSubmit} />\n                    : <ProfileData goToEditMode={() => { setEditMode(true) }} profile={props.profile}\n                        isOwner={props.isOwner} />}\n            </div>\n        </div>\n    );\n};\n\nexport default ProfileInfo;","import React from 'react';\nimport MyPostsContainer from './MyPosts/MyPostsContainer.jsx';\nimport s from './Profile.module.css';\nimport ProfileInfo from './ProfileInfo/ProfileInfo.jsx';\n\nconst Profile = (props) => {\n  return (\n    <div>\n      <ProfileInfo savePhoto={props.savePhoto} profile={props.profile} isOwner={props.isOwner}\n        status={props.status} updateStatus={props.updateStatus} saveProfile={props.saveProfile} />\n      <MyPostsContainer store={props.store} />\n    </div>\n  );\n}\n\nexport default Profile;\n","import React from 'react';\nimport { connect } from 'react-redux';\nimport { getUserProfile, getStatus, updateStatus, savePhoto, saveProfile } from '../../redax/profileReducer.js';\nimport Profile from './Profile.jsx';\nimport s from './Profile.module.css';\nimport { withRouter } from 'react-router-dom';\nimport { compose } from 'redux';\n\nclass ProfileConteiner extends React.Component {\n  reFreshProfile() {\n    let userId = this.props.match.params.userId;\n    if (!userId) {\n      userId = this.props.authorizedUserId;\n      if (!userId) {\n        this.props.history.push(\"/login\");\n      }\n    }\n    this.props.getUserProfile(userId);\n    this.props.getStatus(userId);\n  }\n\n  componentDidMount() {\n\n    this.reFreshProfile();\n  }\n\n  componentDidUpdate(prevProps) {\n    if (this.props.match.params.userId != prevProps.match.params.userId) {\n      this.reFreshProfile();\n    }\n  }\n\n  render() {\n    return (\n      <Profile {...this.props} profile={this.props.profile} status={this.props.status}\n        updateStatus={this.props.updateStatus} isOwner={!this.props.match.params.userId}\n        savePhoto={this.props.savePhoto} />\n    );\n  }\n}\nconst mapStateToProps = (state) => ({\n  profile: state.profilePage.profile,\n  status: state.profilePage.status,\n  authorizedUserId: state.auth.userId,\n  isAuth: state.auth.isAuth\n});\n\nexport default compose(\n  connect(mapStateToProps, { getUserProfile, getStatus, updateStatus, savePhoto, saveProfile }),\n  withRouter)(ProfileConteiner);"],"sourceRoot":""}