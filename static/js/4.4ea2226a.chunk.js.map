{"version":3,"sources":["components/Profile/ProfileInfo/ProfileInfo.module.css","components/Profile/MyPosts/MyPosts.module.css","components/Profile/MyPosts/Post/Post.module.css","components/Profile/MyPosts/Post/Post.tsx","components/Profile/MyPosts/AddPostForm/AddPostForm.tsx","components/Profile/MyPosts/MyPosts.tsx","components/Profile/MyPosts/MyPostsContainer.tsx","components/Profile/ProfileInfo/ProfileStatusWithHooks.tsx","components/Profile/ProfileInfo/ProfileDataForm/ProfileDataForm.tsx","components/Profile/ProfileInfo/ProfileData/ProfileData.tsx","components/Profile/ProfileInfo/ProfileInfo.tsx","components/Profile/Profile.tsx","components/Profile/ProfileConteiner.tsx"],"names":["module","exports","Post","message","numberLike","className","s","item","src","maxLength50","maxLengthCreator","reduxForm","form","props","onSubmit","handleSubmit","createField","Textarea","required","MyPosts","React","memo","postsElemets","posts","map","p","key","id","postBlock","values","addPost","newPostBody","MyPostsContainer","connect","state","profilePage","actions","addPostActionCreator","ProfileStatusWithHooks","useState","editMode","setEditMode","status","setStatus","useEffect","onDoubleClick","onChange","e","currentTarget","value","autoFocus","onBlur","updateStatus","type","profile","error","onClick","style","formSummaryError","Input","Object","keys","contacts","contact","Contact","contactTitle","contactValue","ProfileData","isOwner","goToEditMode","fullName","lookingForAJob","lookingForAJobDescription","aboutMe","ProfileInfo","savePhoto","saveProfile","Preloader","descriptionBlock","photos","large","userPhoto","mainPhoto","target","files","length","initialValues","formData","then","Profile","ProfileConteiner","userId","this","match","params","authorizedUserId","history","push","getUserProfile","getStatus","console","reFreshProfile","prevProps","Component","compose","auth","isAuth","withRouter"],"mappings":"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","file":"static/js/4.4ea2226a.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"descriptionBlock\":\"ProfileInfo_descriptionBlock__3cd8Y\",\"mainPhoto\":\"ProfileInfo_mainPhoto__1Fgjo\",\"contact\":\"ProfileInfo_contact__1N3gp\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"postBlock\":\"MyPosts_postBlock__3b6E0\",\"posts\":\"MyPosts_posts__3tZ1c\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"item\":\"Post_item__ihtu9\"};","import React, { FC } from 'react';\nimport s from './Post.module.css';\n\ntype PropsType = {\n  message: string\n  numberLike: number\n}\n\nconst Post: FC<PropsType> = ({ message, numberLike }) => {\n  return (\n    <div className={s.item}>\n      <img src='https://proprikol.ru/wp-content/uploads/2020/02/kartinki-na-avatarku-dlya-parnej-i-muzhchin-1-1.jpg' />\n      {message}\n      <div>\n        <button>{numberLike} Like</button>\n      </div>\n    </div>\n  );\n}\n\nexport default Post;\n","import React, { FC } from \"react\"\nimport { InjectedFormProps, reduxForm } from \"redux-form\";\nimport { maxLengthCreator, required } from \"../../../../utils/validators/validators\";\nimport { createField, GetStringKeys, Textarea } from \"../../../common/FormsControls/FormControls\";\nimport { AddPostFormValuesType } from \"../MyPosts\"\n\nconst maxLength50 = maxLengthCreator(50);\n\nconst AddPostForm: FC<InjectedFormProps<AddPostFormValuesType, PropsType> & PropsType> = (props) => {\n    return (\n        <form onSubmit={props.handleSubmit}>\n            <div>\n                {createField<AddPostFormValuesKeysType>(\"New Post\", \"newPostBody\", Textarea, [required, maxLength50])}\n\n                {/* <Field component={Textarea} name=\"newPostBody\" placeholder=\"New Post\"\n          validate={[required, maxLength10]} /> */}\n            </div>\n            <div>\n                <button>Add Post</button>\n            </div>\n        </form>\n    )\n}\n\nexport default reduxForm<AddPostFormValuesType, PropsType>({ form: \"myPostsAddPostForm\" })(AddPostForm)\n\ntype AddPostFormValuesKeysType = GetStringKeys<AddPostFormValuesType>\n\ntype PropsType = {}","import React, { FC } from 'react'\nimport s from './MyPosts.module.css'\nimport Post from './Post/Post'\nimport AddPostForm from './AddPostForm/AddPostForm'\nimport { PostsType } from '../../../types/types';\n\nconst MyPosts: FC<MapPropsType & DispatchPropsType> = React.memo(props => {\n\n  const postsElemets = props.posts.map(p => <Post message={p.message} numberLike={p.numberLike} key={p.id} />);\n\n  const addNewPost = (values: AddPostFormValuesType) => {\n    props.addPost(values.newPostBody)\n  }\n  return (\n    <div className={s.postBlock}>\n      <h3>My posts</h3>\n      <div>\n        <div>\n          <AddPostForm onSubmit={addNewPost} />\n        </div>\n      </div>\n      <div className={s.posts}>\n        {postsElemets}\n      </div>\n    </div>\n  );\n});\n\nexport default MyPosts;\n\nexport type MapPropsType = {\n  posts: Array<PostsType>\n}\n\nexport type DispatchPropsType = {\n  addPost: (messageText: string) => void\n}\n\nexport type AddPostFormValuesType = {\n  newPostBody: string\n}","import React from 'react';\nimport { actions } from '../../../redax/profileReducer';\nimport MyPosts, { DispatchPropsType, MapPropsType } from './MyPosts';\nimport { connect } from 'react-redux';\nimport { AppStateType } from '../../../redax/reduxStore';\n\nlet mapStateToProps = (state: AppStateType) => {\n  return {\n    posts: state.profilePage.posts\n  }\n}\n\nconst MyPostsContainer = connect<MapPropsType, DispatchPropsType, {}, AppStateType>(mapStateToProps, {\n  addPost: actions.addPostActionCreator\n})(MyPosts);\n\nexport default MyPostsContainer;\n","import React, { ChangeEvent, FC, useEffect, useState } from 'react'\n\ntype PropsType = {\n    status: string\n    updateStatus: (status: string) => void\n}\n\nconst ProfileStatusWithHooks: FC<PropsType> = (props) => {\n\n    const [editMode, setEditMode] = useState(false);\n    const [status, setStatus] = useState(props.status);\n\n    useEffect(() => {\n        setStatus(props.status)\n    }, [props.status]);\n\n    const activateEditMode = () => {\n        setEditMode(true);\n    }\n    const deactivateEditMode = () => {\n        setEditMode(false);\n        props.updateStatus(status);\n    }\n    const onStatusChange = (e: ChangeEvent<HTMLInputElement>) => {\n        setStatus(e.currentTarget.value);\n    }\n    return (\n        <div>\n            {!editMode &&\n                <div>\n                    <b>Status: </b><span onDoubleClick={activateEditMode}>{props.status || \"No status\"}</span>\n                </div>\n            }\n            {editMode &&\n                <div>\n                    <input onChange={onStatusChange} autoFocus={true} onBlur={deactivateEditMode}\n                        value={status} type=\"text\" />\n                </div>\n            }\n        </div>\n    )\n}\n\n\nexport default ProfileStatusWithHooks;","import React, { FC } from \"react\";\nimport { InjectedFormProps, reduxForm } from \"redux-form\";\nimport { createField, GetStringKeys, Input, Textarea } from \"../../../common/FormsControls/FormControls\";\nimport s from \"../ProfileInfo.module.css\";\nimport style from \"../../../common/FormsControls/FormControls.module.css\";\nimport { ProfileType } from \"../../../../types/types\";\n\nconst ProfileDataForm: FC<InjectedFormProps<ProfileType, PropsType> & PropsType> = ({ handleSubmit, profile, error }) => {\n    return <form onSubmit={handleSubmit} >\n        {<div><button onClick={() => { }}>save</button></div>}\n        <div>{error && <div className={style.formSummaryError}>\n            {error}\n        </div>}\n        </div>\n        <div>\n            <b>My name</b>: {createField<ProfileDataFormKeysType>(\"My name\", \"fullName\", Input, [])}\n        </div>\n        <div>\n            <b>Loking for a job</b>:\n            {createField<ProfileDataFormKeysType>(\"\", \"lookingForAJob\", Input, [], { type: \"checkbox\" })}\n        </div>\n        <div>\n            <b>My professional skills</b>:\n            {createField<ProfileDataFormKeysType>(\"My professional skills\", \"lookingForAJobDescription\", Textarea, [])}\n        </div>\n        <div>\n            <b>About me</b>:\n            {createField<ProfileDataFormKeysType>(\"About me\", \"aboutMe\", Textarea, [])}\n        </div>\n        <div>\n            <b>Contacts</b>: {Object.keys(profile.contacts).map(key => {\n                return <div key={key} className={s.contact}>\n                    {/* todo: create same solution for embedded object */}\n                    <b>{key}: {createField(key, \"contacts.\" + key, Input, [])} </b>\n                </div>\n            })}\n        </div>\n    </form>\n};\n\nexport default reduxForm<ProfileType, PropsType>({ form: 'edit-profile' })(ProfileDataForm);\n\ntype PropsType = {\n    profile: ProfileType\n}\ntype ProfileDataFormKeysType = GetStringKeys<ProfileType>","import React, { FC } from \"react\";\nimport { ContactsType, ProfileType } from \"../../../../types/types\";\nimport s from '../ProfileInfo.module.css';\n\nconst ProfileData: FC<PropsType> = ({ profile, isOwner, goToEditMode }) => {\n    return (\n        <div>\n            {isOwner && <div><button onClick={goToEditMode}>edit</button></div>}\n            <div>\n                <b>My name</b>: {profile.fullName}\n            </div>\n            <div>\n                <b>Loking for a job</b>: {profile.lookingForAJob ? \"Yes\" : \"No\"}\n            </div>\n            {\n                profile.lookingForAJob &&\n                <div>\n                    <b>My professional skills</b>: {profile.lookingForAJobDescription}\n                </div>\n            }\n            <div>\n                <b>About me</b>: {profile.aboutMe}\n            </div>\n            <div>\n                <b>Contacts</b>: {Object.keys(profile.contacts).map(key => {\n                    return <Contact key={key} contactTitle={key} contactValue={profile.contacts[key as keyof ContactsType]} />\n                })}\n            </div>\n        </div>\n    );\n};\n\nconst Contact: FC<ContactPropsType> = ({ contactTitle, contactValue }) => {\n    return <div className={s.contact}><b>{contactTitle}: </b>{contactValue}</div>\n};\n\nexport default ProfileData\n\ntype PropsType = {\n    profile: ProfileType\n    isOwner: boolean\n    goToEditMode: () => void\n}\n\ntype ContactPropsType = {\n    contactTitle: string\n    contactValue: string\n}","import React, { ChangeEvent, FC, useState } from 'react'\nimport Preloader from '../../common/Preloader/Preloader'\nimport s from './ProfileInfo.module.css'\nimport ProfileStatusWithHooks from './ProfileStatusWithHooks'\nimport userPhoto from '../../../assets/images/user.png'\nimport ProfileDataForm from './ProfileDataForm/ProfileDataForm'\nimport ProfileData from './ProfileData/ProfileData'\nimport { ProfileType } from '../../../types/types'\n\nconst ProfileInfo: FC<PropsType> = ({ profile, status, updateStatus, isOwner, savePhoto, saveProfile }) => {\n\n    const [editMode, setEditMode] = useState(false);\n\n    const onSubmit = (formData: ProfileType) => {\n        // todo: remove then  \n        saveProfile(formData).then(\n            () => {\n                setEditMode(false)\n            }\n        )\n    }\n\n    if (!profile) {\n        return <Preloader />\n    }\n\n    const onMainPhotoSelected = (e: ChangeEvent<HTMLInputElement>) => {\n        if (e.target.files?.length) {\n            savePhoto(e.target.files[0]);\n        }\n    }\n    return (\n        <div>\n            <div>\n                <img src='https://p.bigstockphoto.com/GeFvQkBbSLaMdpKXF1Zv_bigstock-Aerial-View-Of-Blue-Lakes-And--227291596.jpg' />\n            </div>\n            <div className={s.descriptionBlock}>\n                <img src={profile.photos.large || userPhoto} className={s.mainPhoto} />\n                {isOwner && <input type=\"file\" onChange={onMainPhotoSelected} />}\n                <ProfileStatusWithHooks status={status} updateStatus={updateStatus} />\n\n                {editMode ? <ProfileDataForm profile={profile} initialValues={profile} onSubmit={onSubmit} />\n                    : <ProfileData goToEditMode={() => { setEditMode(true) }} profile={profile}\n                        isOwner={isOwner} />}\n            </div>\n        </div>\n    )\n}\n\nexport default ProfileInfo\n\ntype PropsType = {\n    profile: ProfileType | null\n    status: string\n    updateStatus: (status: string) => void\n    isOwner: boolean\n    savePhoto: (file: File) => void\n    saveProfile: (profile: ProfileType) => Promise<any>\n}\n","import React, { FC } from 'react'\nimport { ProfileType } from '../../types/types'\nimport MyPostsContainer from './MyPosts/MyPostsContainer'\nimport ProfileInfo from './ProfileInfo/ProfileInfo'\n\nconst Profile: FC<PropsType> = (props) => {\n  return (\n    <div>\n      <ProfileInfo savePhoto={props.savePhoto} profile={props.profile} isOwner={props.isOwner}\n        status={props.status} updateStatus={props.updateStatus} saveProfile={props.saveProfile} />\n      <MyPostsContainer />\n    </div>\n  );\n}\n\nexport default Profile;\n\ntype PropsType = {\n  profile: ProfileType | null\n  status: string\n  updateStatus: (status: string) => void\n  isOwner: boolean\n  savePhoto: (file: File) => void\n  saveProfile: (profile: ProfileType) => Promise<any>\n}","import React, { ComponentType } from 'react'\nimport { connect } from 'react-redux'\nimport { getUserProfile, getStatus, updateStatus, savePhoto, saveProfile } from '../../redax/profileReducer'\nimport Profile from './Profile'\nimport { RouteComponentProps, withRouter } from 'react-router-dom'\nimport { compose } from 'redux'\nimport { AppStateType } from '../../redax/reduxStore'\nimport { ProfileType } from '../../types/types'\n\nclass ProfileConteiner extends React.Component<PropsType>{\n  reFreshProfile() {\n    let userId: number | null = +this.props.match.params.userId;\n    if (!userId) {\n      userId = this.props.authorizedUserId;\n      if (!userId) {\n        // todo: may be replace push with Redirect??? \n        this.props.history.push(\"/login\")\n      }\n    }\n    if (!userId) {\n      console.error(\"ID should exists in URI params or in state ('authorizedUserId')\")\n    } else {\n      this.props.getUserProfile(userId)\n      this.props.getStatus(userId)\n    }\n  }\n\n  componentDidMount() {\n\n    this.reFreshProfile();\n  }\n\n  componentDidUpdate(prevProps: PropsType) {\n    if (this.props.match.params.userId != prevProps.match.params.userId) {\n      this.reFreshProfile();\n    }\n  }\n\n  render() {\n    return (\n      <Profile {...this.props} profile={this.props.profile} status={this.props.status}\n        updateStatus={this.props.updateStatus} isOwner={!this.props.match.params.userId}\n        savePhoto={this.props.savePhoto} />\n    );\n  }\n}\nconst mapStateToProps = (state: AppStateType) => ({\n  profile: state.profilePage.profile,\n  status: state.profilePage.status,\n  authorizedUserId: state.auth.userId,\n  isAuth: state.auth.isAuth\n});\n\nexport default compose<ComponentType>(\n  connect(mapStateToProps, { getUserProfile, getStatus, updateStatus, savePhoto, saveProfile }),\n  withRouter)(ProfileConteiner)\n\ntype MapPropsType = ReturnType<typeof mapStateToProps>\n\ntype DispatchPropsType = {\n  getUserProfile: (userId: number) => void\n  getStatus: (userId: number) => void\n  updateStatus: (status: string) => void\n  savePhoto: (file: File) => void\n  saveProfile: (profile: ProfileType) => Promise<any>\n\n}\n\ntype PathParamsType = {\n  userId: string\n}\n\ntype PropsType = MapPropsType & DispatchPropsType & RouteComponentProps<PathParamsType>"],"sourceRoot":""}