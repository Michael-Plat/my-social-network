{"version":3,"sources":["components/Profile/MyPosts/MyPosts.module.css","components/Profile/ProfileInfo/ProfileInfo.module.css","components/Profile/MyPosts/Post/Post.module.css","components/Profile/MyPosts/Post/Post.jsx","components/Profile/MyPosts/MyPosts.jsx","components/Profile/MyPosts/MyPostsCopyClass.jsx","components/Profile/MyPosts/MyPostsContainer.jsx","components/Profile/ProfileInfo/ProfileStatusWithHooks.jsx","components/Profile/ProfileInfo/ProfileInfo.jsx","components/Profile/Profile.jsx","components/Profile/ProfileConteiner.jsx"],"names":["module","exports","Post","props","className","s","item","src","message","numberLike","MyPosts","React","memo","postsElemets","posts","map","p","key","id","createRef","postBlock","AddPostFormRedux","onSubmit","values","addPost","newPostBody","maxLength10","maxLengthCreator","reduxForm","form","handleSubmit","Field","component","Textarea","name","placeholder","validate","required","PureComponent","MyPostsContainer","connect","state","profilePage","newPostText","dispatch","addPostActionCreator","ProfileStatusWithHooks","useState","editMode","setEditMode","status","setStatus","useEffect","onDoubleClick","onChange","e","currentTarget","value","autoFocus","onBlur","updateStatus","type","ProfileInfo","profile","descriptionBlock","photos","large","fullName","aboutMe","contacts","facebook","vk","twitter","instagram","Preloader","Profile","store","ProfileConteiner","userId","this","match","params","authorizedUserId","history","push","getUserProfile","getStatus","Component","compose","auth","isAuth","withRouter"],"mappings":"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","file":"static/js/3.e574cb04.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"postBlock\":\"MyPosts_postBlock__3b6E0\",\"posts\":\"MyPosts_posts__3tZ1c\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"descriptionBlock\":\"ProfileInfo_descriptionBlock__3cd8Y\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"item\":\"Post_item__ihtu9\"};","import React from 'react';\nimport s from './Post.module.css';\nconst Post = (props) => {\n  return (\n    <div className={s.item}>\n      <img src='https://proprikol.ru/wp-content/uploads/2020/02/kartinki-na-avatarku-dlya-parnej-i-muzhchin-1-1.jpg' />\n      {props.message}\n      <div>\n        <button>{props.numberLike} Like</button>\n      </div>\n    </div>\n  );\n}\n\nexport default Post;\n","import React from 'react';\nimport s from './MyPosts.module.css';\nimport Post from './Post/Post.jsx';\nimport { reduxForm, Field } from 'redux-form';\nimport { maxLengthCreator, required } from '../../../utils/validators/validators.js';\nimport { Textarea } from '../../common/FormsControls/FormControls';\n\nconst MyPosts = React.memo(props => {\n  \n  // console.log(\"RENDER YO To\");\n\n  let postsElemets = props.posts.map(p => <Post message={p.message} numberLike={p.numberLike} key={p.id} />);\n\n  let newPostElemet = React.createRef();\n\n  let addNewPost = (values) => {\n    props.addPost(values.newPostBody)\n  }\n  return (\n    <div className={s.postBlock}>\n      <h3>My posts</h3>\n      <div>\n        <div>\n          <AddPostFormRedux onSubmit={addNewPost} />\n        </div>\n      </div>\n      <div className={s.posts}>\n        {postsElemets}\n      </div>\n    </div>\n  );\n});\n\nconst maxLength10 = maxLengthCreator(10);\n\nconst AddPostForm = (props) => {\n  return (\n    <form onSubmit={props.handleSubmit}>\n      <div>\n        <Field component={Textarea} name=\"newPostBody\" placeholder=\"New Post\"\n                validate={[required, maxLength10 ]} />\n      </div>\n      <div>\n        <button>Add Post</button>\n      </div>\n    </form>\n  )\n}\n\nconst AddPostFormRedux = reduxForm({ form: \"myPostsAddPostForm\" })(AddPostForm)\n\nexport default MyPosts;\n","import React from 'react';\nimport { Field, reduxForm } from 'redux-form';\nimport { maxLengthCreator, required } from '../../../utils/validators/validators.js';\nimport { Textarea } from '../../common/FormsControls/FormControls';\nimport s from './MyPosts.module.css';\nimport Post from './Post/Post.jsx';\n\nclass MyPostsClassCopy extends React.PureComponent {\n  \n  // componentDidMount() {\n  //   setTimeout(() => {\n  //     this.setState({a: 12});\n  //   }, 3000)\n  // }\n\n  // shouldComponentUpdate(nextProps, nextState) {\n  //   return nextProps != this.props || nextState != this.state;\n  // }\n\n  render() {\n    console.log(\"RENDER YO\")\n\n    let postsElemets = this.props.posts.map(p => <Post message={p.message} numberLike={p.numberLike} key={p.id} />);\n\n    let newPostElemet = React.createRef();\n\n    let addNewPost = (values) => {\n      this.props.addPost(values.newPostBody)\n    }\n    return (\n      <div className={s.postBlock}>\n        <h3>My posts</h3>\n        <div>\n          <div>\n            <AddPostFormRedux onSubmit={addNewPost} />\n          </div>\n        </div>\n        <div className={s.posts}>\n          {postsElemets}\n        </div>\n      </div>\n    )\n  }\n}\nconst maxLength10 = maxLengthCreator(10);\n\nconst AddPostForm = (props) => {\n  return (\n    <form onSubmit={props.handleSubmit}>\n      <div>\n        <Field component={Textarea} name=\"newPostBody\" placeholder=\"New Post\"\n          validate={[required, maxLength10]} />\n      </div>\n      <div>\n        <button>Add Post</button>\n      </div>\n    </form>\n  )\n}\n\nconst AddPostFormRedux = reduxForm({ form: \"myPostsAddPostForm\" })(AddPostForm)\n\nexport default MyPostsClassCopy;\n","import React from 'react';\nimport { addPostActionCreator } from '../../../redax/profileReducer';\nimport MyPosts from './MyPosts';\nimport { connect } from 'react-redux';\nimport MyPostsClassCopy from './MyPostsCopyClass';\n\nlet mapStateToProps = (state) => {\n  return {\n    posts: state.profilePage.posts,\n    newPostText: state.profilePage.newPostText\n  }\n}\n\nlet mapDispatchToProps = (dispatch) => {\n  return {\n    addPost: (newPostBody) => {\n      dispatch (addPostActionCreator(newPostBody))\n    }\n  }\n\n}\n\nconst MyPostsContainer = connect(mapStateToProps, mapDispatchToProps)(MyPosts);\n\nexport default MyPostsContainer;\n","import React, { useEffect, useState } from 'react';\nimport s from './ProfileInfo.module.css';\n\nconst ProfileStatusWithHooks = (props) => {\n\n    let [editMode, setEditMode] = useState(false);\n    let [status, setStatus] = useState(props.status);\n\n    useEffect( () => {\n        setStatus(props.status)\n    }, [props.status]);\n\n    const activateEditMode = () => {\n        setEditMode(true);\n    }\n    const deactivateEditMode = () => {\n        setEditMode(false);\n        props.updateStatus(status);\n    }\n    const onStatusChange = (e) => {\n        setStatus(e.currentTarget.value);\n    }\n    return (\n        <div>\n            { !editMode &&\n                <div>\n                    <span onDoubleClick={activateEditMode}>{props.status || \"No status\"}</span>\n                </div>\n            }\n            { editMode &&\n                <div>\n                    <input onChange={onStatusChange} autoFocus={true} onBlur={deactivateEditMode}\n                        value={status} type=\"text\" />\n                </div>\n            }\n        </div>\n    )\n}\n\n\nexport default ProfileStatusWithHooks;","import React from 'react';\nimport Preloader from '../../common/Preloader/Preloader';\nimport s from './ProfileInfo.module.css';\nimport ProfileStatusWithHooks from './ProfileStatusWithHooks';\n\nconst ProfileInfo = (props) => {\n    if (!props.profile) {\n        return <Preloader />\n    }\n    return (\n        <div>\n            <div>\n                <img src='https://p.bigstockphoto.com/GeFvQkBbSLaMdpKXF1Zv_bigstock-Aerial-View-Of-Blue-Lakes-And--227291596.jpg' />\n            </div>\n            <div className={s.descriptionBlock}>\n                <img src={props.profile.photos.large} /> \n                <ProfileStatusWithHooks status={props.status} updateStatus={props.updateStatus} />\n                <br/>\n                    <p>My name {props.profile.fullName} </p>\n                    <p>About me - {props.profile.aboutMe} </p> \n                    <p>My contacts: <br/>{props.profile.contacts.facebook} <br/>{props.profile.contacts.vk}\n                    <br/>{props.profile.contacts.twitter} <br/>{props.profile.contacts.instagram} </p>\n            </div>\n        </div>\n    );\n}\nexport default ProfileInfo;","import React from 'react';\nimport MyPostsContainer from './MyPosts/MyPostsContainer.jsx';\nimport s from './Profile.module.css';\nimport ProfileInfo from './ProfileInfo/ProfileInfo.jsx';\n\nconst Profile = (props) => {\n\n  return (\n    <div>\n      <ProfileInfo profile={props.profile} status={props.status} updateStatus={props.updateStatus}  />\n      <MyPostsContainer store={props.store} />\n    </div>\n  );\n}\n\nexport default Profile;\n","import React from 'react';\nimport { connect } from 'react-redux';\nimport { getUserProfile, getStatus, updateStatus } from '../../redax/profileReducer.js';\nimport Profile from './Profile.jsx';\nimport s from './Profile.module.css';\nimport { withRouter } from 'react-router-dom';\nimport { compose } from 'redux';\n\nclass ProfileConteiner extends React.Component {\n  componentDidMount() {\n    let userId = this.props.match.params.userId;\n    if (!userId) {\n      userId = this.props.authorizedUserId;\n      if (!userId) {\n        this.props.history.push(\"/login\");\n      }\n    }\n    this.props.getUserProfile(userId);\n    this.props.getStatus(userId);\n  }\n  render() {\n    return (\n      <Profile {...this.props} profile={this.props.profile} status={this.props.status} \n      updateStatus={this.props.updateStatus} />\n    );\n  }\n}\n\nconst mapStateToProps = (state) => ({\n  profile: state.profilePage.profile,\n  status: state.profilePage.status,\n  authorizedUserId: state.auth.userId,\n  isAuth: state.auth.isAuth\n});\n\nexport default compose(\n  connect(mapStateToProps, { getUserProfile, getStatus, updateStatus }),\n  withRouter)(ProfileConteiner);"],"sourceRoot":""}