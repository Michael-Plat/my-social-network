{"version":3,"sources":["components/Dialogs/Dialogs.module.css","hoc/withAuthRedirect.tsx","components/Dialogs/DialogItem/DialogItem.tsx","components/Dialogs/Message/Message.tsx","components/Dialogs/AddMessageForm/AddMessageForm.tsx","components/Dialogs/Dialogs.tsx","components/Dialogs/DialogsContainer.tsx"],"names":["module","exports","mapStateToPropsForRedirect","state","isAuth","auth","DialogItem","props","path","id","className","s","dialog","to","name","Message","message","maxLength50","maxLengthCreator","reduxForm","form","onSubmit","handleSubmit","createField","Textarea","required","Dialogs","dialogsElements","dialogsPage","dialogs","map","d","key","messagesElements","messages","m","dialogsItems","values","sendMessage","newMessageBody","compose","connect","actions","WrappedComponent","restProps"],"mappings":"2FACAA,EAAOC,QAAU,CAAC,QAAU,yBAAyB,aAAe,8BAA8B,OAAS,wBAAwB,QAAU,2B,kGCIvIC,EAA6B,SAACC,GAAD,MAA0B,CACzDC,OAAQD,EAAME,KAAKD,S,uCCORE,EATmB,SAACC,GAC/B,IAAIC,EAAO,YAAcD,EAAME,GAC/B,OACI,yBAAKC,UAAWC,IAAEC,QACd,kBAAC,IAAD,CAASC,GAAIL,GAAOD,EAAMO,QCEvBC,EAPgB,SAACR,GAE5B,OACI,yBAAKG,UAAWC,IAAEK,SAAUT,EAAMS,U,yBCApCC,EAAcC,YAAiB,IAetBC,cAAoC,CAAEC,KAAM,wBAA5CD,EAbgF,SAACZ,GAC5F,OACI,0BAAMc,SAAUd,EAAMe,cAClB,6BACKC,YAA0C,qBAAsB,iBAAkBC,IAAU,CAACC,IAAUR,KAE5G,6BACI,gDCgBDS,EAxBgB,SAACnB,GAE5B,IAAMoB,EAAkBpB,EAAMqB,YAAYC,QAAQC,KAAI,SAAAC,GAAC,OAAI,kBAAC,EAAD,CAAYjB,KAAMiB,EAAEjB,KAAMkB,IAAKD,EAAEtB,GAAIA,GAAIsB,EAAEtB,QAEhGwB,EAAmB1B,EAAMqB,YAAYM,SAASJ,KAAI,SAAAK,GAAC,OAAI,kBAAC,EAAD,CAASnB,QAASmB,EAAEnB,QAASgB,IAAKG,EAAE1B,QAKjG,OACI,yBAAKC,UAAWC,IAAEkB,SACd,yBAAKnB,UAAWC,IAAEyB,cACbT,GAEL,yBAAKjB,UAAWC,IAAEuB,UACbD,GAEL,6BACI,kBAAC,EAAD,CAAgBZ,SAZN,SAACgB,GACnB9B,EAAM+B,YAAYD,EAAOE,sBCAlBC,sBACXC,aAPoB,SAACtC,GACrB,MAAO,CACHyB,YAAazB,EAAMyB,eAKhB,eAAuBc,OLN3B,SAA+BC,GASlC,OAHqCF,YAChCvC,EADgCuC,EAL2B,SAAClC,GAAW,IAChEH,EAAyBG,EAAzBH,OAAWwC,EADoD,YACtCrC,EADsC,YAEvE,OAAKH,EACE,kBAACuC,EAAqBC,GADT,kBAAC,IAAD,CAAU/B,GAAG,gBKE1B2B,CAGbd","file":"static/js/8.f2c14dff.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"dialogs\":\"Dialogs_dialogs__2xRSA\",\"dialogsItems\":\"Dialogs_dialogsItems__2sNe2\",\"dialog\":\"Dialogs_dialog__lk_cw\",\"message\":\"Dialogs_message__1xIDh\"};","import React, { Component, ComponentType, FC } from 'react';\nimport { connect } from 'react-redux';\nimport { Redirect } from \"react-router\";\nimport { AppStateType } from '../redax/reduxStore';\n\nconst mapStateToPropsForRedirect = (state: AppStateType) => ({\n    isAuth: state.auth.isAuth\n});\n\nexport function WithAuthRedirect<WCP>(WrappedComponent: ComponentType<WCP>) {\n    const RedirectComponent: FC<MapPropsType & DispatchPropsType> = (props) => {\n        const { isAuth, ...restProps } = props\n        if (!isAuth) return <Redirect to='/Login' />;\n        return <WrappedComponent {...restProps as WCP} />;\n    }\n    const ConnectAuthRedirectComponent = connect<MapPropsType, DispatchPropsType, WCP, AppStateType>\n        (mapStateToPropsForRedirect)(RedirectComponent);\n\n    return ConnectAuthRedirectComponent;\n}\n\ntype MapPropsType = {\n    isAuth: boolean\n}\n\ntype DispatchPropsType = {}","import React, { FC } from 'react'\nimport { NavLink } from 'react-router-dom'\nimport s from './../Dialogs.module.css'\n\nconst DialogItem: FC<PropsType> = (props) => {\n    let path = \"/Dialogs/\" + props.id;\n    return (\n        <div className={s.dialog}>\n            <NavLink to={path}>{props.name}</NavLink>\n        </div>\n    );\n}\n\nexport default DialogItem\n\ntype PropsType = {\n    id: number\n    name: string\n}","import React, { FC } from 'react'\nimport s from './../Dialogs.module.css'\n\nconst Message: FC<PropsType> = (props) => {\n\n    return (\n        <div className={s.message}>{props.message}</div>\n    );\n}\n\nexport default Message\n\ntype PropsType = {\n    message: string\n}","import React, { FC } from \"react\"\nimport { InjectedFormProps, reduxForm } from \"redux-form\"\nimport { maxLengthCreator, required } from \"../../../utils/validators/validators\"\nimport { createField, GetStringKeys, Textarea } from \"../../common/FormsControls/FormControls\"\nimport { NewMessageFormValuesType } from \"../Dialogs\"\n\nconst maxLength50 = maxLengthCreator(50);\n\nconst AddMessageForm: FC<InjectedFormProps<NewMessageFormValuesType, PropsType> & PropsType> = (props) => {\n    return (\n        <form onSubmit={props.handleSubmit} >\n            <div>\n                {createField<NewMessageFormValuesKeysType>(\"Enter your message\", \"newMessageBody\", Textarea, [required, maxLength50])}\n            </div>\n            <div>\n                <button>Message</button>\n            </div>\n        </form>\n    )\n}\n\nexport default reduxForm<NewMessageFormValuesType>({ form: \"dialogAddMessageForm\" })(AddMessageForm);\n\ntype NewMessageFormValuesKeysType = GetStringKeys<NewMessageFormValuesType>\n\ntype PropsType = {}","import React, { FC } from 'react'\nimport DialogItem from './DialogItem/DialogItem'\nimport s from './Dialogs.module.css'\nimport Message from './Message/Message'\nimport { InitialStateType } from '../../redax/dialogsReducer'\nimport AddMessageForm from './AddMessageForm/AddMessageForm'\n\nconst Dialogs: FC<PropsType> = (props) => {\n\n    const dialogsElements = props.dialogsPage.dialogs.map(d => <DialogItem name={d.name} key={d.id} id={d.id} />);\n\n    const messagesElements = props.dialogsPage.messages.map(m => <Message message={m.message} key={m.id} />);\n\n    const addNewMessage = (values: NewMessageFormValuesType) => {\n        props.sendMessage(values.newMessageBody);\n    }\n    return (\n        <div className={s.dialogs}>\n            <div className={s.dialogsItems}>\n                {dialogsElements}\n            </div>\n            <div className={s.messages}>\n                {messagesElements}\n            </div>\n            <div>\n                <AddMessageForm onSubmit={addNewMessage} />\n            </div>\n        </div>\n    );\n}\n\nexport default Dialogs;\n\ntype PropsType = {\n    dialogsPage: InitialStateType\n    sendMessage: (messageText: string) => void\n}\n\nexport type NewMessageFormValuesType = {\n    newMessageBody: string\n}","import React, { ComponentType } from 'react'\nimport { connect } from 'react-redux'\nimport { compose } from 'redux'\nimport { WithAuthRedirect } from '../../hoc/withAuthRedirect'\nimport { actions } from '../../redax/dialogsReducer'\nimport { AppStateType } from '../../redax/reduxStore'\nimport Dialogs from './Dialogs'\n\nconst mapStateToProps = (state: AppStateType) => {\n    return {\n        dialogsPage: state.dialogsPage,\n    }\n}\n\nexport default compose<ComponentType>(\n    connect(mapStateToProps, { ...actions }),\n    WithAuthRedirect\n)(Dialogs);\n\n"],"sourceRoot":""}